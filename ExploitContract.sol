// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./VulnerableContract.sol";

contract ExploitContract {
    VulnerableContract public vulnerable;

    constructor(address _vulnerableAddress) {
        vulnerable = VulnerableContract(_vulnerableAddress);
    }

    // External function to increase storedData in VulnerableContract
    function increaseStoredData() external {
        vulnerable.storedData++;
    }

    // External function to reset storedData in VulnerableContract
    function resetStoredData() external {
        vulnerable.resetStoredData();
    }

    // External function that performs an exploit (malicious action)
    function exploitFunction() external {
        // Example of a malicious action, like redirecting funds
        address payable attacker = payable(msg.sender);
        uint256 amount = address(this).balance;
        attacker.transfer(amount);
    }

    // External function in ExploitContract called by VulnerableContract
    function vulnerableFunction() external {
        // Call vulnerable function resetStoredData in VulnerableContract
        vulnerable.resetStoredData();
    }
}

